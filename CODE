Table Creation:

-- Create Employee table
CREATE TABLE Employee (
    EmployeeID SERIAL PRIMARY KEY,
    EmpFirst_Name VARCHAR(50),
    EmpLast_SSN VARCHAR(20),
    EmpMail_Address VARCHAR(100),
    Designation VARCHAR(50),
    Department VARCHAR(50),
    Salary DECIMAL(10, 2),
    Employee_Type VARCHAR(20)
);

-- Create Customer table
CREATE TABLE Customer (
    CustomerID SERIAL PRIMARY KEY,
    First_Name VARCHAR(50),
    Last_Name VARCHAR(50),
    Mail_Address VARCHAR(100),
    Phone_Number VARCHAR(20),
    Category VARCHAR(50)
);

-- Create Address table
CREATE TABLE Address (
    AddressID SERIAL PRIMARY KEY,
    Address_line1 VARCHAR(100),
    Address_line2 VARCHAR(100)
);

-- Create Zip Code table
CREATE TABLE Zip_Code (
    ZipCode VARCHAR(10) PRIMARY KEY,
    City VARCHAR(50),
    State VARCHAR(50)
);

-- Create Bill table
CREATE TABLE Bill (
    Billing_ID SERIAL PRIMARY KEY,
    Amount_Paid DECIMAL(10, 2)
);

-- Create Payment table
CREATE TABLE Payment (
    Payment_ID SERIAL PRIMARY KEY,
    Payment_Type VARCHAR(20),
    CreditCard_Number VARCHAR(20),
    Card_Type VARCHAR(20),
    CVV_Number VARCHAR(10),
    ExpiryDate DATE,
    CardHolder_Name VARCHAR(100)
);

-- Create Orders table
CREATE TABLE Orders (
    Order_ID SERIAL PRIMARY KEY,
    Shippment_Duration VARCHAR(50),
    Order_Date DATE,
    Status VARCHAR(50)
);

-- Create Order Item table
CREATE TABLE Order_Item (
    OrderItem_ID SERIAL PRIMARY KEY,
    Order_ID INT REFERENCES Orders(Order_ID),
    Date_of_Order DATE,
    Quantity INT
);

-- Create Order Product table
CREATE TABLE Order_Product (
    OrderProduct_ID SERIAL PRIMARY KEY,
    Order_ID INT REFERENCES Orders(Order_ID),
    Product_ID INT REFERENCES Product(ProductID),
    Quantity INT
);

-- Create Voucher table
CREATE TABLE Voucher (
    Voucher_Number SERIAL PRIMARY KEY,
    Description TEXT,
    Priority INT,
    Quantity_Item INT
);

-- Create Product table
CREATE TABLE Product (
    ProductID SERIAL PRIMARY KEY,
    Product_Name VARCHAR(100),
    Available_Number INT
);

-- Create Product Details table
CREATE TABLE Product_Details (
    ProductID INT REFERENCES Product(ProductID) PRIMARY KEY,
    Weight DECIMAL(10, 2),
    Width DECIMAL(10, 2),
    Colour VARCHAR(50),
    Height DECIMAL(10, 2)
);

-- Create Product Group table
CREATE TABLE Product_Group (
    Group_ID SERIAL PRIMARY KEY,
    Group_Name VARCHAR(50)
);

-- Create Review table
CREATE TABLE Review (
    Review_ID SERIAL PRIMARY KEY,
    Quality INT,
    Defect_Percentage DECIMAL(5, 2),
    Review_Date DATE
);


Stored Procedures:
Create Stored Procedure to Get Employee by ID:


CREATE OR REPLACE FUNCTION get_employee_by_id(emp_id INT)
RETURNS TABLE(EmployeeID INT, EmpFirst_Name VARCHAR(50), EmpLast_SSN VARCHAR(20), EmpMail_Address VARCHAR(100), Designation VARCHAR(50), Department VARCHAR(50), Salary DECIMAL(10, 2), Employee_Type VARCHAR(20))
AS $$
BEGIN
    RETURN QUERY SELECT * FROM Employee WHERE EmployeeID = emp_id;
END;
$$ LANGUAGE plpgsql;
Create Stored Procedure to Get Customer by ID:


CREATE OR REPLACE FUNCTION get_customer_by_id(cust_id INT)
RETURNS TABLE(CustomerID INT, First_Name VARCHAR(50), Last_Name VARCHAR(50), Mail_Address VARCHAR(100), Phone_Number VARCHAR(20), Category VARCHAR(50))
AS $$
BEGIN
    RETURN QUERY SELECT * FROM Customer WHERE CustomerID = cust_id;
END;
$$ LANGUAGE plpgsql;
Triggers:

Create Trigger to Update Product Availability on Order:

CREATE OR REPLACE FUNCTION update_product_availability()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE Product
    SET Available_Number = Available_Number - NEW.Quantity
    WHERE ProductID = NEW.Product_ID;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_product_availability_trigger
AFTER INSERT ON Order_Item
FOR EACH ROW
EXECUTE FUNCTION update_product_availability();
Create Trigger to Calculate Review Score on Review Insertion:


CREATE OR REPLACE FUNCTION calculate_review_score()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE Product
    SET Average_Review_Score = (SELECT AVG(Quality) FROM Review WHERE Product_ID = NEW.Product_ID)
    WHERE ProductID = NEW.Product_ID;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_review_score_trigger
AFTER INSERT ON Review
FOR EACH ROW
EXECUTE FUNCTION calculate_review_score();
Views:
Create View to Get Order Details with Customer Information:


CREATE OR REPLACE VIEW Order_Details AS
SELECT o.Order_ID, o.Shippment_Duration, o.Order_Date, o.Status, c.CustomerID, c.First_Name, c.Last_Name
FROM Orders o
INNER JOIN Customer c ON o.Customer_ID = c.CustomerID;
Create View to Get Product Reviews:


CREATE OR REPLACE VIEW Product_Reviews AS
SELECT p.ProductID, p.Product_Name, r.Review_ID, r.Quality, r.Defect_Percentage, r.Review_Date
FROM Product p
INNER JOIN Review r ON p.ProductID = r.Product_ID;
